amd_base_image = "bento/ubuntu-22.04"
amd_base_version = "202206.03.0"
amd_version = "0.0.7"

arm_base_image = "bento/ubuntu-22.04-arm64"
arm_base_version = "202401.31.0"
arm_version = "0.0.9"

Vagrant.configure("2") do |config|
	arch = `uname -m`.chomp
	arm = arch == 'arm64' || arch == 'aarch64'
	apple_silicon = Vagrant::Util::Platform.darwin? && (arm || (`sysctl -n machdep.cpu.brand_string`.chomp.start_with? 'Apple M'))

	# Sets the memory to either 4096MiB or total mem / 4, whichever is larger
	mem = get_memory(4096, 0.25)

	# The time in seconds that Vagrant will wait for the machine to boot and be accessible.
	config.vm.boot_timeout = 600

	# main box used by consumers of sv-kubernetes
	config.vm.define "primary", primary: true do |c|
		c.vm.box = "owenallenaz/sv-kubernetes"
		c.vm.box_version = !apple_silicon ? amd_version : arm_version
		c.vm.hostname = "sv-kube"
		c.vm.synced_folder ".", "/sv", owner: "root", group: "root"

		# Apple Silicon Only: Disable auto-config after first provisioning to avoid start-up error with interface reboot
		c.vm.network "private_network", ip: "192.168.50.100", auto_config: (apple_silicon and provisioned?) ? false : true

		c.ssh.username = "root"
		c.ssh.password = "vagrant"

		if !apple_silicon
			c.vm.provider "virtualbox" do |v|
				v.cpus = 2
				v.customize ["modifyvm", :id, "--audio", "none"]
				v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
				v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
				v.customize ["modifyvm", :id, "--memory", mem]
			end

			c.vm.disk :disk, size: "200GB", primary: true
			c.vm.provision "shell", inline: "/bin/bash /sv/scripts/extend_disk.sh"
		else
			c.vm.provider "vmware_desktop" do |v|
				v.cpus = 2
				v.memory = mem
				v.linked_clone = false
			end
		end

		c.vm.provision "file", source: "~/.ssh/github_key", destination: "/root/.ssh/github_key"
	end

	# development box used for working with packer to generate the base box
	config.vm.define "base", autostart: false do |c|
		c.vm.box = !apple_silicon ? amd_base_image : arm_base_image
		c.vm.box_version = !apple_silicon ? amd_base_version : arm_base_version
		c.vm.network "private_network", ip: "192.168.50.101"
		c.vm.synced_folder ".", "/sv"

		if !apple_silicon
			c.vm.provider "virtualbox" do |v|
				v.cpus = 2
				v.customize ["modifyvm", :id, "--memory", mem]
			end
		else
			c.vm.provider "vmware_desktop" do |v|
				v.cpus = 2
				v.memory = mem
			end
		end
	end
end

# Determines amount of memory to allocate to Vagrant box, in mebibytes (MiB)
def get_memory(mem_min, mem_ratio)
	total_mem = nil
	if Vagrant::Util::Platform.windows?
		total_mem = `node get_mem.js`.to_i
	elsif Vagrant::Util::Platform.darwin? # mac
		total_mem = `sysctl -n hw.memsize`.strip().to_i / ( 1024 * 1024 )
	else # linux
		total_mem = `awk '/MemTotal/ {print $2}' /proc/meminfo`.strip().to_i / 1024
	end

	[ (total_mem * mem_ratio).round, mem_min ].max
end

# Determines if a vagrant VM has already been provisioned
def provisioned?(vm_name='primary', provider='vmware_fusion')
	File.exist?(".vagrant/machines/#{vm_name}/#{provider}/action_provision")
end
